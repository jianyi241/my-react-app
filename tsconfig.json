{
  "compilerOptions": {
    "target": "es5", // 编译后的目标javascript版本,ES5 ,ES6/ES2015 ,ES2016 ,ES2017 ,ES2018 ,ES2019 ,ES2020 ,ESNext
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "noImplicitAny": false, // 不需要显式地声明变量的类型any
    "allowJs": true, // 允许混合编译JavaScript文件
    "skipLibCheck": true,
    "esModuleInterop": true, // 允许我们使用commonjs的方式import默认文件，import React from 'react'
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext", // 配置的是我们代码的模块系统，Node.js的CommonJS、ES6标准的esnext、requirejs的AMD
    "moduleResolution": "node", // 决定了我们编译器的工作方式，"node" and "classic"，其中classic选项已于2019年12月废弃了
    "resolveJsonModule": true,
    "isolatedModules": true, // 编译器会将每个文件作为单独的模块来使用
    "noEmit": true, // 表示当错误发生的时候，编译器不要生成JavaScript代码
    "jsx": "react-jsx", // 允许编译器支持编译react代码
    // ts语法的配置文件补充 compilerOptions
    // 除了上述配置项外，图文节中补充了compilerOptions中，还可以配置如下选项：
    "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx"], // 列出我们需要编译的文件
    "files":[], // 列出始终编译的文件有哪些
    "exclude":["node_modules"], // 列出不编译的文件有哪些
  },
  "include": [
    "src",
    "config/setupProxy.js"
  ]
}
